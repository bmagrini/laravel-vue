<?php

namespace Emtudo\Support\Validators;

use Emtudo\Support\Helpers\Dates as DateHelper;
use ResultSystems\Validation\Validator as BaseValidator;

class Validator extends BaseValidator
{
    /**
     * @param string $attribute
     * @param mixed  $value
     * @param array  $parameters
     *
     * @return bool
     */
    public function validateCleanUnique($attribute, $value, $parameters)
    {
        $value = $this->clearSpecialChars($value);

        return parent::validateUnique($attribute, $value, $parameters); // TODO: Change the autogenerated stub
    }

    /**
     * @param string $attribute
     * @param mixed  $value
     * @param array  $parameters
     *
     * @return bool
     */
    public function validateCleanExists($attribute, $value, $parameters)
    {
        $value = $this->clearSpecialChars($value);

        return parent::validateExists($attribute, $value, $parameters);
    }

    public function validateValidDateFormat($attribute, $value, $parameters)
    {
        return DateHelper::isValidDate($value);
    }

    public function validateExistsPublicId($attribute, $value, $parameters)
    {
        return $this->validateExists($attribute, decode_id($value), $parameters);
    }

    /**
     * @param string $value
     *
     * @return string
     */
    protected function clearSpecialChars($value)
    {
        return str_replace(['.', '/', ',', '-', '_'], '', $value);
    }

    /**
     * Replace all params the force_user rule.
     *
     * @param string $message
     * @param string $attribute
     * @param string $rule
     * @param array  $parameters
     *
     * @return string
     */
    protected function replaceForceYear($message, $attribute, $rule, $parameters)
    {
        $other = $this->getDisplayableAttribute($parameters[0]);

        return str_replace(':other', $other, $message);
    }
}
